{"version":3,"sources":["C:/Users/Emil/Documents/webdev-task-8/src/components/src/components/Main.vue","C:/Users/Emil/Documents/webdev-task-8/src/components/src/components/Pig.vue","C:/Users/Emil/Documents/webdev-task-8/src/components/src/components/PigSpeech.vue"],"names":[],"mappings":"AAgBA,sBACA,mBAAA,CAAA,mBAAA,CAAA,YAAA,CACA,wBAAA,CAAA,qBAAA,CAAA,kBAAA,CACA,uBAAA,CAAA,oBAAA,CAAA,sBACA,CAEA,gCACA,eAAA,CACA,UAAA,CACA,YAAA,CACA,gBACA,CCoDA,sBACA,YAAA,CACA,UAAA,CACA,WAAA,CACA,iCAAA,CACA,2BAAA,CACA,yEAGA,CAEA,2BACA,kBACA,CAEA,6BACA,oBACA,CAEA,8BACA,qBAAA,CACA,gBACA,CAEA,uBACA,oiCACA,CAEA,wBACA,gvCACA,CAEA,wBACA,g0CACA,CAEA,wBACA,g0CACA,CAEA,wBACA,oyCACA,CAEA,sBACA,UAAA,CACA,WAAA,CACA,uBAAA,CACA,2BACA,CChEA,4BACA,iBAAA,CACA,WACA,CAEA,yBACA,iBAAA,CACA,OAAA,CACA,QACA","file":"app.ef64b5f343fcc4b378fd.css","sourcesContent":["<template>\n  <main>\n    <Pig class=\"pig-container\" />\n  </main>\n</template>\n\n<script>\nimport Vue from 'vue'\nimport { Component } from 'vue-property-decorator'\n\n@Component\nexport default class Main extends Vue {\n}\n</script>\n\n<style scoped>\n  main {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n  }\n\n  .pig-container {\n    max-width: 450px;\n    width: 100%;\n    height: 100vh;\n    max-height: 310px;\n  }\n</style>\n","<template>\n  <div>\n    <div class=\"pig\">\n      <div class=\"pig-phrases\">\n        <PigSpeech />\n      </div>\n\n      <div class=\"pig-avatar\">\n        <div class=\"svg\" :class=\"svgFrame\"></div>\n      </div>\n\n      <div class=\"pig-bars\">\n        <b-progress v-b-tooltip.hover title=\"Сытость\" variant=\"info\" class=\"mb-2\"\n          :value=\"pig.fat\" show-progress />\n        <b-progress v-b-tooltip.hover title=\"Энергия\" variant=\"warning\" class=\"mb-2\"\n          :value=\"pig.energy\" show-progress />\n        <b-progress v-b-tooltip.hover title=\"Настроение\" variant=\"danger\" class=\"mb-2\"\n          :value=\"pig.mood\" show-progress />\n          <b-button-group>\n            <b-button variant=\"outline-secondary\" size=\"sm\" @click=\"restart\">\n              <font-awesome-icon :icon=\"$icon.faRedo\" />\n            </b-button>\n            <b-button variant=\"outline-secondary\" size=\"sm\" id=\"setupVolume\">\n              <font-awesome-icon :icon=\"state.volumeLevel > 30 ? $icon.faVolumeUp :\n                state.volumeLevel ? $icon.faVolumeDown : $icon.faVolumeOff\" />\n            </b-button>\n            <GiftButton />\n            <SpeakButton />\n          </b-button-group>\n        <VolumeSetupPopover targetId=\"setupVolume\" />\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport Vue from 'vue'\nimport { Component } from 'vue-property-decorator'\nimport { Getter, Action } from 'vuex-class'\nimport Visibility from 'visibilityjs'\nimport _ from 'lodash'\nimport pigstate from '../pigstate'\n\n\n@Component\nexport default class Pig extends Vue {\n  svgFrame = 'idle0'\n\n  @Getter state\n  @Getter pig\n  @Getter isNight\n  @Getter needsAttention\n\n  @Action restart\n  @Action cradle\n  @Action interrupt\n  @Action feed\n\n  created() {\n    if (!Visibility.hidden()) {\n      this.interrupt()\n    }\n\n    setInterval(() => {\n      this.svgFrame = this.pig.state === pigstate.DEAD ? 'dead' : `idle${_.random(3)}`\n    }, 500)\n\n    Visibility.change(() => {\n      if (Visibility.hidden()) {\n        this.cradle()\n      } else {\n        this.interrupt()\n      }\n    })\n  }\n}\n</script>\n\n<style scoped>\n  .pig {\n    display: grid;\n    width: 100%;\n    height: 100%;\n    grid-template-columns: 30% 5% auto;\n    grid-template-rows: 30% auto;\n    grid-template-areas:\n      \"pig-phrases . pig-avatar\"\n      \"pig-bars    . pig-avatar\";\n  }\n\n  .pig-bars {\n    grid-area: pig-bars;\n  }\n\n  .pig-avatar {\n    grid-area: pig-avatar;\n  }\n\n  .pig-phrases {\n    grid-area: pig-phrases;\n    text-align: right;\n  }\n\n  .dead {\n    background-image: url('../assets/dead.svg');\n  }\n\n  .idle0 {\n    background-image: url('../assets/idle0.svg');\n  }\n\n  .idle1 {\n    background-image: url('../assets/idle1.svg');\n  }\n\n  .idle2 {\n    background-image: url('../assets/idle2.svg');\n  }\n\n  .idle3 {\n    background-image: url('../assets/idle3.svg');\n  }\n\n  .svg {\n    width: 100%;\n    height: 100%;\n    background-size: contain;\n    background-repeat: no-repeat;\n  }\n</style>\n","<template>\n  <div class=\"container\">\n    <div :key=\"phrase\" class=\"animated fadeOutUp speech\">{{phrase}}</div>\n  </div>\n</template>\n\n<script>\nimport Vue from 'vue'\nimport _ from 'lodash'\nimport { Component } from 'vue-property-decorator'\nimport { Getter } from 'vuex-class'\nimport pigstate from '../pigstate'\n\n\n@Component\nexport default class PigSpeech extends Vue {\n  @Getter pig\n  @Getter needsAttention\n  @Getter isNight\n  @Getter volumeLevel\n\n  isTalking = false\n  phrase = ''\n\n  get phrases() {\n    switch (this.pig.state) {\n      case pigstate.IDLE:\n        return ['привет', 'как дела?', 'хрю-хрю', this.isNight ? 'уже темно, а ты еще не спишь...' : 'ты хорошо выглядишь']\n      case pigstate.LISTENING:\n        return ['ага, а дальше что?', 'ой, это как так?', 'и что?', 'блиин', 'я так и знала', 'мдаааааа...']\n      case pigstate.SLEEPING:\n        return ['*храпит*', 'z-z-z', '...']\n      case pigstate.EATING:\n        return ['как вкусно!', 'ном-ном :з', '(^___^)', 'давай еще', this.isNight ? 'на ночь есть вредно.' : 'какие прекрасные килобайты']\n      default:\n        return []\n    }\n  }\n\n  updatePhrase() {\n    const needsAttention = this.pig.state !== pigstate.DEAD && this.needsAttention\n    this.phrase = _.sample(this.phrases.concat(needsAttention\n      ? ['посмотри на меня!', 'мне плохо...', 'тебе на меня наплевать :\\'('] : []))\n    if (speechSynthesis && !this.isTalking) {\n      this.isTalking = true\n      const utterance = new SpeechSynthesisUtterance(this.phrase)\n      utterance.volume = this.volumeLevel / 100\n      utterance.onstart = () => {\n        setTimeout(() => {\n          this.isTalking = false\n        }, 10000)\n      }\n      speechSynthesis.speak(utterance)\n    }\n    setTimeout(() => this.updatePhrase(), _.random(1000, 2000))\n  }\n\n  created() {\n    setTimeout(() => this.updatePhrase(), _.random(1000, 2000))\n  }\n}\n</script>\n\n<style scoped>\n  .container {\n    position: relative;\n    height: 100%;\n  }\n\n  .speech {\n    position: absolute;\n    right: 0;\n    bottom: 0;\n  }\n</style>\n"]}